plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

def getVersionProperties() {
    Properties versionProps = new Properties()
    try {
        File versionPropsFile = file("../version.properties")
        if (versionPropsFile.exists()) {
            versionProps.load(versionPropsFile.newDataInputStream())
        } else {
            println "version.properties file not found"
        }
    } catch (Exception e) {
        println "Error reading version.properties file: " + e.getMessage()
    }
    return versionProps
}

def generateVersionCode(String versionName) {
    if (versionName == null) {
        versionName = "0.0.1"
    }
    def (major, minor, patch) = versionName.tokenize('.').collect { it.toInteger() }
    return major * 10000 + minor * 100 + patch
}

def getFullVersionName() {
    String versionName = "0.0.0"
    try {
        Properties versionProps = getVersionProperties()
        versionName = versionProps.getProperty("version_name", versionName)
    } catch (Exception e) {
        println "Error reading version.properties file: " + e.getMessage()
    }
    return versionName
}

android {
    namespace 'dgs.software.classicchess'
    compileSdk 33

    defaultConfig {
        applicationId "dgs.software.classicchess"
        minSdk 21
        targetSdk 33
        versionCode generateVersionCode(getVersionProperties().getProperty("version_name"))
        versionName getFullVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile file('../keystore.jks')
            storePassword System.getenv('KEYSTORE_PASSWORD')
            keyAlias System.getenv('KEY_ALIAS')
            keyPassword System.getenv('KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix ''
        }
        debug {
            versionNameSuffix '-debug'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.1.1'
    implementation 'androidx.navigation:navigation-runtime-ktx:2.4.1'
    implementation "androidx.navigation:navigation-compose:2.5.3"
    implementation "com.google.android.material:compose-theme-adapter:1.0.5"

    // Koin
    def koin_version = "3.3.3"
    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-androidx-compose:3.4.2"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.21.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
}